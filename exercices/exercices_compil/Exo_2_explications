Exo 2 explication

Partie 1

Partie 2 (suite)

avec arm-none-eabi-gcc -O2 -S exo_2.c 

	.cpu arm7tdmi
	.arch armv4t
	.fpu softvfp
	.eabi_attribute 20, 1
	.eabi_attribute 21, 1
	.eabi_attribute 23, 3
	.eabi_attribute 24, 1
	.eabi_attribute 25, 1
	.eabi_attribute 26, 1
	.eabi_attribute 30, 2
	.eabi_attribute 34, 0
	.eabi_attribute 18, 4
	.file	"exo_2.c"
	.text
	.align	2
	.global	f
	.syntax unified
	.arm
	.type	f, %function
f:
	@ Function supports interworking.
	@ Naked Function: prologue and epilogue provided by programmer.
	@ args = 0, pretend = 0, frame = 0
	@ frame_needed = 0, uses_anonymous_args = 0
	ldr	r2, .L3
	ldm	r2, {r0, r1}
	ldr	ip, [r1]
	ldr	r3, [r0]
	add	r3, r3, ip
	ldr	r2, [r2, #8]
	str	r3, [r0]
	ldr	r3, [r2]
	ldr	r1, [r1]
	add	r3, r3, r1
	str	r3, [r2]
.L4:
	.align	2
.L3:
	.word	.LANCHOR0
	.size	f, .-f
	.global	c
	.global	b
	.global	a
	.bss
	.align	2
	.set	.LANCHOR0,. + 0
	.type	a, %object
	.size	a, 4
a:
	.space	4
	.type	c, %object
	.size	c, 4
c:
	.space	4
	.type	b, %object
	.size	b, 4
b:
	.space	4
	.ident	"GCC: (GNU) 11.3.1 20220712"


et avec objdump :

00000000 <f>:
   0:	e59f2024 	ldr	r2, [pc, #36]	; 2c <f+0x2c>
   4:	e8920003 	ldm	r2, {r0, r1}
   8:	e591c000 	ldr	ip, [r1]
   c:	e5903000 	ldr	r3, [r0]
  10:	e083300c 	add	r3, r3, ip
  14:	e5922008 	ldr	r2, [r2, #8]
  18:	e5803000 	str	r3, [r0]
  1c:	e5923000 	ldr	r3, [r2]
  20:	e5911000 	ldr	r1, [r1]
  24:	e0833001 	add	r3, r3, r1
  28:	e5823000 	str	r3, [r2]
  2c:	00000000 	.word	0x00000000

GCC charge deux fois le contenu de *c car si a et c pointent sur la même adresse, déréferencer a revient aussi à déréferencer c


